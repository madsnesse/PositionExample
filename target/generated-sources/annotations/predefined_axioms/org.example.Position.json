[{"method":"@AxiomForExistingClass(className = \"java.lang.Comparable\")\npublic static <T extends Comparable<T>> void compareToConsistentWithSignum(org.example.Position x, org.example.Position y) {\n    assertEquals(java.lang.Integer.signum(x.compareTo(y)), -java.lang.Integer.signum(y.compareTo(x)));\n}","isGeneric":false,"qualifiedClassName":"org.example.Position"},{"method":"@Axiom\nstatic <T extends Group<T>> void associativeBinaryOperation(org.example.Position a, org.example.Position b, org.example.Position c) {\n    org.example.Position ab = a.binaryOperation(b);\n    org.example.Position bc = b.binaryOperation(c);\n    assertEquals(ab.binaryOperation(c), bc.binaryOperation(a));\n}","isGeneric":false,"qualifiedClassName":"org.example.Position"},{"method":"@Axiom\nstatic <T extends Group<T>> void neutralAxiom(org.example.Position a) {\n    assertEquals(a, a.binaryOperation(a.identity()));\n}","isGeneric":false,"qualifiedClassName":"org.example.Position"},{"method":"@Axiom\nstatic <T extends Group<T>> void inverseAxiom(org.example.Position a) {\n    assertEquals(a.identity(), a.binaryOperation(a.inverse()));\n}","isGeneric":false,"qualifiedClassName":"org.example.Position"},{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void equalsIsReflexive(org.example.Position o) {\n    assertEquals(o, o);\n}","isGeneric":false,"qualifiedClassName":"org.example.Position"},{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void equalsIsSymmetric(org.example.Position x, org.example.Position y) {\n    assertEquals(x.equals(y), y.equals(x));\n}","isGeneric":false,"qualifiedClassName":"org.example.Position"},{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void equalsIsTransitive(org.example.Position x, org.example.Position y, org.example.Position z) {\n    if (x.equals(y) && y.equals(z)) {\n        assertEquals(x, z);\n    }\n}","isGeneric":false,"qualifiedClassName":"org.example.Position"},{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void equalsIsConsistent(org.example.Position x, org.example.Position y) {\n    assertEquals(x.equals(y), x.equals(y));\n}","isGeneric":false,"qualifiedClassName":"org.example.Position"},{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void equalsNullIsFalse(org.example.Position x) {\n    assertEquals(x.equals(null), false);\n}","isGeneric":false,"qualifiedClassName":"org.example.Position"},{"method":"@AxiomForExistingClass(className = \"java.lang.Object\")\npublic static void equalsCongruence(org.example.Position o) {\n    //the public methods of a class\n    var m = o.getClass().getMethods();\n    // legg inn metoder som skal sjekkes i axiom prosseseringen\n}","isGeneric":false,"qualifiedClassName":"org.example.Position"}]